import java.math.BigInteger; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 

// Java program to calculate SHA hash value 

class GFG { 
	private static final char[] HEX_DIGITS = "0123456789ABCDEF".toCharArray();
	private static final String ALPHA_NUMERIC_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	public static String randomAlphaNumeric(int count) {
		StringBuilder builder = new StringBuilder();
		while (count-- != 0) {
		int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());
		builder.append(ALPHA_NUMERIC_STRING.charAt(character));
		}
		return builder.toString();
		}
	
	public static String getSHA(String input) 
	{ 

		try { 

			// Static getInstance method is called with hashing SHA 
			MessageDigest md = MessageDigest.getInstance("SHA-256"); 

			// digest() method called 
			// to calculate message digest of an input 
			// and return array of byte 
			byte[] messageDigest = md.digest(input.getBytes()); 

			// Convert byte array into signum representation 
			char[] chars = new char[messageDigest.length * 2];
		    for (int i = 0; i < messageDigest.length; i++) {
		        chars[i * 2] = HEX_DIGITS[(messageDigest[i] >> 4) & 0xf];
		        chars[i * 2 + 1] = HEX_DIGITS[messageDigest[i] & 0xf];
		    }
		    
			//BigInteger no = new BigInteger(1, messageDigest); 

			// Convert message digest into hex value 
			//String hashtext = no.toString(16); 
		    String hashtext=new String(chars);
			while (hashtext.length() < 32) { 
				hashtext = "0" + hashtext; 
			} 

			return hashtext; 
		} 

		// For specifying wrong message digest algorithms 
		catch (NoSuchAlgorithmException e) { 
			System.out.println("Exception thrown"
							+ " for incorrect algorithm: " + e); 

			return null; 
		} 
	} 

	// Driver code 
	public static void main(String args[]) throws NoSuchAlgorithmException 
	{ 
		System.out.println("HashCode Generated by SHA-256 for:"); 

		String s1 = "s4572399"; 
		int i=0;
		//double d= 1;
		int g=0;
		String s2;
		//String s3=Double.toString(s2); 
		//System.setProperty("key", "custom_value");
		System.setProperty("value", Integer.toString(i));
		String s= null;
		String hash;
		int k=5;
		double d=0;
		
		while(true)
		{
			if((d>10000000))
			{
				d=0;
				k++;
				//System.out.println("value increase");
				//System.out.println(s);
				if(k>10)
					k=1;
			}
			
			d++;
			int j=0;
			//System.out.println();
			//d=d+0.1;
			//s3=Double.toString(d);
			s2 = randomAlphaNumeric(k);
			s = s1.concat(s2);
			hash= getSHA(s);
			//System.out.println(s2);
			char e;
			while(true)
			{
				
				e=hash.charAt(j);
				if(e=='0')
				{
				
					
					
					if(g<=j)
					{
						g=j;
						g++;
						System.out.println(s);
						System.out.println(hash);
						System.out.println(g);
					}
					j++;
					//System.out.println(e+" here it is");
					
					
				}
				else{
					//System.out.println(e);
					//System.out.println(hash);
					
					break;
					
					
				}
				//System.out.println(e);
				
			
				
			}
			
			
			
		}
		
	} 
} 
